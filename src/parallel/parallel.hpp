
#pragma once

#ifndef NS_PARALLEL_HPP
#define NS_PARALLEL_HPP

#include<tuple>
#include<atomic>
#include<thread>
#include<vector>
#include<limits>
#include<future>

///////////////////////////////////////////////////////////////////////////////////////////////////

namespace ns{

///////////////////////////////////////////////////////////////////////////////////////////////////
//関数宣言
///////////////////////////////////////////////////////////////////////////////////////////////////

//並列実行
template<class T, class F> std::enable_if_t<std::is_integral<T>::value> in_parallel(const T n, F &&f, const size_t nt = std::thread::hardware_concurrency());
template<class T, class F> std::enable_if_t<std::is_integral<T>::value> in_parallel(const std::tuple<T, T> &n, F &&f, const size_t nt = std::thread::hardware_concurrency());
template<class T, class F> std::enable_if_t<std::is_integral<T>::value> in_parallel(const std::tuple<T, T, T> &n, F &&f, const size_t nt = std::thread::hardware_concurrency());

///////////////////////////////////////////////////////////////////////////////////////////////////

}; //namespace ns

///////////////////////////////////////////////////////////////////////////////////////////////////

#include"func-impl.hpp"

///////////////////////////////////////////////////////////////////////////////////////////////////

#endif
